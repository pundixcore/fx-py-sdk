# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from fx_py_sdk.codec.fx.oracle import query_pb2 as fx_dot_oracle_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMarkets = channel.unary_unary(
                '/fx.oracle.Query/GetMarkets',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryMarketsRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryMarketsResponse.FromString,
                )
        self.GetMarket = channel.unary_unary(
                '/fx.oracle.Query/GetMarket',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryMarketRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryMarketResponse.FromString,
                )
        self.GetCurrentPrice = channel.unary_unary(
                '/fx.oracle.Query/GetCurrentPrice',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryPriceRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryPriceResponse.FromString,
                )
        self.GetCurrentPrices = channel.unary_unary(
                '/fx.oracle.Query/GetCurrentPrices',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryPricesRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryPricesResponse.FromString,
                )
        self.GetParams = channel.unary_unary(
                '/fx.oracle.Query/GetParams',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.GetLatestOracleRequest = channel.unary_unary(
                '/fx.oracle.Query/GetLatestOracleRequest',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryLatestOracleRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.BandOracleRequest.FromString,
                )
        self.GetAggrators = channel.unary_unary(
                '/fx.oracle.Query/GetAggrators',
                request_serializer=fx_dot_oracle_dot_query__pb2.QueryAggregatorsRequest.SerializeToString,
                response_deserializer=fx_dot_oracle_dot_query__pb2.QueryAggregatorsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def GetMarkets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentPrices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestOracleRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAggrators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMarkets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarkets,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryMarketsRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryMarketsResponse.SerializeToString,
            ),
            'GetMarket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarket,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryMarketRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryMarketResponse.SerializeToString,
            ),
            'GetCurrentPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentPrice,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryPriceRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryPriceResponse.SerializeToString,
            ),
            'GetCurrentPrices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentPrices,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryPricesRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryPricesResponse.SerializeToString,
            ),
            'GetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParams,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'GetLatestOracleRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestOracleRequest,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryLatestOracleRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.BandOracleRequest.SerializeToString,
            ),
            'GetAggrators': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAggrators,
                    request_deserializer=fx_dot_oracle_dot_query__pb2.QueryAggregatorsRequest.FromString,
                    response_serializer=fx_dot_oracle_dot_query__pb2.QueryAggregatorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fx.oracle.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def GetMarkets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetMarkets',
            fx_dot_oracle_dot_query__pb2.QueryMarketsRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryMarketsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetMarket',
            fx_dot_oracle_dot_query__pb2.QueryMarketRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryMarketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetCurrentPrice',
            fx_dot_oracle_dot_query__pb2.QueryPriceRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentPrices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetCurrentPrices',
            fx_dot_oracle_dot_query__pb2.QueryPricesRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryPricesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetParams',
            fx_dot_oracle_dot_query__pb2.QueryParamsRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestOracleRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetLatestOracleRequest',
            fx_dot_oracle_dot_query__pb2.QueryLatestOracleRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.BandOracleRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAggrators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.oracle.Query/GetAggrators',
            fx_dot_oracle_dot_query__pb2.QueryAggregatorsRequest.SerializeToString,
            fx_dot_oracle_dot_query__pb2.QueryAggregatorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
